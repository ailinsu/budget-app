{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/ailinsu/budget-app/Screens/LoginScreen.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport * as Google from 'expo-google-app-auth';\nimport firebase from 'firebase';\n\nvar LoginScreen = function (_React$Component) {\n  _inherits(LoginScreen, _React$Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen() {\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.isUserEqual = function (googleUser, firebaseUser) {\n      if (firebaseUser) {\n        var providerData = firebaseUser.providerData;\n\n        for (var i = 0; i < providerData.length; i++) {\n          if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID && providerData[i].uid === googleUser.getBasicProfile().getId()) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    };\n\n    _this.onSignIn = function (googleUser) {\n      console.log('Google Auth Response', googleUser);\n      var unsubscribe = firebase.auth().onAuthStateChanged(function (firebaseUser) {\n        unsubscribe();\n\n        if (!this.isUserEqual(googleUser, firebaseUser)) {\n          console.log('new user');\n          var credential = firebase.auth.GoogleAuthProvider.credential(googleUser);\n          firebase.auth().signInWithCredential(credential).then(function (result) {\n            console.log(result);\n          }).catch(function (error) {\n            var errorCode = error.code;\n            var errorMessage = error.message;\n            var email = error.email;\n            var credential = error.credential;\n            console.log(error);\n          });\n        } else {\n          console.log('User already signed-in Firebase.');\n        }\n      }.bind(_assertThisInitialized(_this)));\n    };\n\n    _this.signInWithGoogleAsync = function _callee() {\n      var result;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Google.logInAsync({\n                androidClientId: \"330347084828-omlb7ofqspios3r9gnpqeciej88grlbn.apps.googleusercontent.com\",\n                scopes: ['profile', 'email']\n              }));\n\n            case 3:\n              result = _context.sent;\n\n              if (!(result.type === 'success')) {\n                _context.next = 9;\n                break;\n              }\n\n              _this.onSignIn(result);\n\n              return _context.abrupt(\"return\", result.accessToken);\n\n            case 9:\n              return _context.abrupt(\"return\", {\n                cancelled: true\n              });\n\n            case 10:\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](0);\n              return _context.abrupt(\"return\", {\n                error: true\n              });\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 12]], Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }\n      }, React.createElement(Button, {\n        title: \"Sign In with Google\",\n        onPress: function onPress() {\n          return _this2.signInWithGoogleAsync();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n\n  return LoginScreen;\n}(React.Component);\n\nexport { LoginScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/ailinsu/budget-app/Screens/LoginScreen.js"],"names":["React","Google","firebase","LoginScreen","isUserEqual","googleUser","firebaseUser","providerData","i","length","providerId","auth","GoogleAuthProvider","PROVIDER_ID","uid","getBasicProfile","getId","onSignIn","console","log","unsubscribe","onAuthStateChanged","credential","signInWithCredential","then","result","catch","error","errorCode","code","errorMessage","message","email","bind","signInWithGoogleAsync","logInAsync","androidClientId","scopes","type","accessToken","cancelled","styles","container","Component","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, View, Button } from 'react-native';\nimport * as Google from 'expo-google-app-auth';\nimport firebase from 'firebase';\n\nexport default class LoginScreen extends React.Component {\n\n    isUserEqual = (googleUser, firebaseUser) => {\n        if (firebaseUser) {\n          var providerData = firebaseUser.providerData;\n          for (var i = 0; i < providerData.length; i++) {\n            if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID &&\n                providerData[i].uid === googleUser.getBasicProfile().getId()) {\n              // We don't need to reauth the Firebase connection.\n              return true;\n            }\n          }\n        }\n        return false;\n      }\n\n      onSignIn = googleUser => {\n        console.log('Google Auth Response', googleUser);\n        // We need to register an Observer on Firebase Auth to make sure auth is initialized.\n        var unsubscribe = firebase.auth().onAuthStateChanged(function(firebaseUser) {\n            unsubscribe();\n            // Check if we are already signed-in Firebase with the correct user.\n            if (!this.isUserEqual(googleUser, firebaseUser)) {\n                console.log('new user');\n            // Build Firebase credential with the Google ID token.\n            var credential = firebase.auth.GoogleAuthProvider.credential(\n                googleUser\n                );\n            // Sign in with credential from the Google user.\n            firebase.auth().signInWithCredential(credential)\n            .then(function(result) {\n                console.log(result);\n                // firebase\n                //     .database()\n                //     .ref('/users/' + result.user.uid)\n                //     .set({\n                //         gmail: result.user.email,\n                //         profile_picture: result.additionalUserInfo.profile.picture\n                //     })\n            })\n            .catch(function(error) {\n                // Handle Errors here.\n                var errorCode = error.code;\n                var errorMessage = error.message;\n                // The email of the user's account used.\n                var email = error.email;\n                // The firebase.auth.AuthCredential type that was used.\n                var credential = error.credential;\n                // ...\n                console.log(error);\n            });\n            } else {\n            console.log('User already signed-in Firebase.');\n            }\n        }.bind(this));\n    };\n    signInWithGoogleAsync = async() => {\n        try {\n          const result = await Google.logInAsync({\n            androidClientId: \"330347084828-omlb7ofqspios3r9gnpqeciej88grlbn.apps.googleusercontent.com\",\n            scopes: ['profile', 'email'],\n          });\n      \n          if (result.type === 'success') {\n            this.onSignIn(result);\n            return result.accessToken;\n          } else {\n            return { cancelled: true };\n          }\n        } catch (e) {\n          return { error: true };\n        }\n      }\n\n    render() {\n        return (\n        <View style={styles.container}>\n            <Button\n                title=\"Sign In with Google\"\n                onPress={() => this.signInWithGoogleAsync()}\n            />\n        </View>\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}